/*******************************************************************************
 * Copyright (c) 2009 John Bradley
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     John Bradley - initial API and implementation
 *******************************************************************************/
package uk.ac.kcl.cch.jb.pliny.views;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.jface.viewers.IStructuredContentProvider;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IMemento;

import uk.ac.kcl.cch.jb.pliny.PlinyPlugin;
import uk.ac.kcl.cch.jb.pliny.dnd.ResourceExplorerDragListener;
import uk.ac.kcl.cch.jb.pliny.model.Resource;
import uk.ac.kcl.cch.jb.pliny.model.ResourceNameChangeAnnouncmentService;
import uk.ac.kcl.cch.jb.pliny.views.utils.IResourceExplorerItem;
import uk.ac.kcl.cch.jb.pliny.views.utils.IResourceTreeDisplayer;
import uk.ac.kcl.cch.jb.pliny.views.utils.ResourceExplorerContentProvider;
import uk.ac.kcl.cch.jb.pliny.views.utils.ResourceExplorerLabelProvider;
import uk.ac.kcl.cch.jb.pliny.views.utils.ResourceExplorerSelectedListManager;
import uk.ac.kcl.cch.rdb2java.Rdb2javaPlugin;

/**
 * the class that supports the name searching view of Resources in the
 * {@link ResourceExplorerView}.  The way this tab displays resources is almost entirely
 * managed by the root object of the TreeView:  
 * {@link uk.ac.kcl.cch.jb.pliny.views.utils.ResourceExplorerSelectedListManager ResourceExplorerSelectedListManager},
 * which, as well as being a 
 * {@link uk.ac.kcl.cch.jb.pliny.views.utils.IResourceExplorerItem IResourceExplorerItem},
 * also handles the queries and dynamic updating of the list or Resources generated by
 * the user's search string.
 * 
 * @author John Bradley
 *
 */
public class RENameSearchTab extends REBaseTab implements
		IResourceTreeDisplayer, PropertyChangeListener {
	
	private static final String MEMENTO_SEARCH_STRING="SavedSearchString";

	private IStructuredContentProvider myContentProvider;
	private ILabelProvider myLabelProvider;
	private Text searchStringField;
	private String savedSearchString = "";
	
	private ResourceExplorerSelectedListManager listProvider = null;

	public RENameSearchTab(ResourceExplorerView view) {
		super(view);
		ResourceNameChangeAnnouncmentService.getService().addPropertyChangeListener(this);
		Rdb2javaPlugin.getDataServer().addPropertyChangeListener(this);
	}
	
	public void dispose(){
		ResourceNameChangeAnnouncmentService.getService().removePropertyChangeListener(this);
		Rdb2javaPlugin.getDataServer().removePropertyChangeListener(this);
		super.dispose();
	}

	@Override
	public String getTabName() {
		return "Search";
	}

	@Override
	public String getToolTipText() {
		// TODO Auto-generated method stub
		return "Search resources by name";
	}
	
	protected void buildContent(Composite parent){
		GridLayout mylayout = new GridLayout();
		mylayout.numColumns = 1;
		mylayout.marginHeight = 0;
		mylayout.marginWidth = 0;
		GridData gd = new GridData(GridData.FILL_HORIZONTAL);
		parent.setLayout(mylayout);
		defineSelectionArea(parent, gd);
		defineTreeArea(parent);
	}

	private void defineSelectionArea(Composite parent, GridData gd) {
		Composite rslt = new Composite(parent, SWT.NONE);
		rslt.setLayoutData(gd);
		GridLayout layout = new GridLayout(2,false);
		layout.horizontalSpacing = 5;
		layout.marginWidth = 5;
		layout.marginTop = 5;
		rslt.setLayout(layout);
		Color menuBackground = Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);
	    rslt.setBackground(menuBackground);

		Label label = new Label(rslt, SWT.NONE);
		label.setText("Search: ");
		
	    
	    searchStringField = new Text(rslt, SWT.BORDER);
	    searchStringField.setLayoutData(new GridData(GridData.FILL_BOTH));
        searchStringField.setText(savedSearchString);

        searchStringField.addModifyListener(new ModifyListener (){

			public void modifyText(ModifyEvent e) {
				Text text = (Text) e.widget;
				String string = text.getText();
				if(string.length() == 0)string = null;
				listProvider.setSearchString(string);
			}
	    	
	    });
	}
	
	private void defineTreeArea(Composite composite) {
		
		listProvider = (ResourceExplorerSelectedListManager)getDisplayRoot();
		
		viewer = new TreeViewer(composite, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
		viewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
		myContentProvider = new ResourceExplorerContentProvider(this);
		viewer.setContentProvider(myContentProvider);
		myLabelProvider = new ResourceExplorerLabelProvider();
		viewer.setLabelProvider(myLabelProvider);
		//viewer.setSorter(new NameSorter());
		viewer.setInput(getDisplayRoot());
		//viewer.refresh();
		viewer.setColumnProperties(new String[]{ResourceExplorerView.NAME_ID});
	}
	
	public Control getFocusControl(){
		if(viewer.getControl().getEnabled())return viewer.getControl();
		return searchStringField;
	}
	
	@Override
	protected void hookDragAndDrop() {
		new ResourceExplorerDragListener(this);
	}

	@Override
	protected IResourceExplorerItem makeDisplayRoot() {
		listProvider = new ResourceExplorerSelectedListManager(this, savedSearchString);
		return listProvider;
	}

	public void propertyChange(PropertyChangeEvent arg0) {
		String pattern = listProvider.getSearchString().toLowerCase();
		if(pattern.length() < 2)return;
		
		if(arg0.getPropertyName().equals("Create-Resource")){
			Resource r = (Resource)arg0.getNewValue();
			if(r.getFullName().toLowerCase().startsWith(pattern))
				listProvider.addResource(r);
			return;
		}

		if(arg0.getPropertyName().equals("Delete-Resource")){
			Resource r = (Resource)arg0.getOldValue();
			if(r.getFullName().toLowerCase().startsWith(pattern))
				listProvider.removeResource(r);
			return;
		}
		if(arg0.getPropertyName() != Resource.NAME_PROP)return;
		if(listProvider == null)return;
		
		Resource r = (Resource)arg0.getNewValue();
		String oldName = ((String)arg0.getOldValue()).toLowerCase();
		String newName = r.getFullName().toLowerCase();
		
		if(oldName.startsWith(pattern)){
			if(newName.startsWith(pattern)){
				viewer.refresh();
				return;
			}
			listProvider.removeResource(r);
		} else if(newName.startsWith(pattern)){
			listProvider.addResource(r);
		} else viewer.refresh();
		
	}

	
	public void setState(IMemento memento){
		if(memento == null)return;
		String val = memento.getString(MEMENTO_SEARCH_STRING);
		if(val == null)return;
		savedSearchString = val;
	}
	
	public void saveState(IMemento memento){
		if(memento == null)return;
		String val = null;
		if(searchStringField != null && searchStringField.getText() != null){
			val = searchStringField.getText();
		}
		if(val == null)val = "";
		memento.putString(MEMENTO_SEARCH_STRING, val);
	}
	
}
