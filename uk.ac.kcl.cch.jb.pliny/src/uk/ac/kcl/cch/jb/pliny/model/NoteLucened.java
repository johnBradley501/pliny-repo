/*******************************************************************************
 * Copyright (c) 2007, 2012 John Bradley
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     John Bradley - initial API and implementation
 *     John Bradley - modified to support IDataServer approach to data management
 *******************************************************************************/
package uk.ac.kcl.cch.jb.pliny.model;

import java.io.*;
import java.util.*;
import java.sql.Date;
import java.sql.*;

import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PartInitException;

import uk.ac.kcl.cch.rdb2java.dynData.*;
import uk.ac.kcl.cch.jb.pliny.PlinyPlugin;
import uk.ac.kcl.cch.jb.pliny.editors.NoteEditorInput;
import uk.ac.kcl.cch.jb.pliny.lucene.NoteTextIndex;

/**
 * an extension of the {link Note} class generated by rdb2java and managing
 * the DB storage of data to support the simultaneous storing of Note
 * text by Lucene.
 * <p>
 * The Lucene index is only set up and operational in each Pliny session after
 * the first time the user uses the Note Search view.  Thus, each time
 * the name or content fields are changed, or a recorded added or deleted
 * the code here first checks to see if the Lucene index is set up, and if
 * it is, asks it to update its material at the same time.
 * 
 * @author John Bradley
 *
 */

public class NoteLucened extends Note{

   public NoteLucened(boolean realEmpty){
     super(realEmpty);
     if(!realEmpty){
    	 if(NoteTextIndex.getInstance().isIndexOn())
            NoteTextIndex.getInstance().addNoteToIndex(this);
     }
   }

   public NoteLucened(){
     super();
	 if(NoteTextIndex.getInstance().isIndexOn())
         NoteTextIndex.getInstance().addNoteToIndex(this);
   }


   static public NoteLucened getNoteLucenedItem(int key){
      return (NoteLucened)Note.getNoteItem(key);
   }

   public void setContent(String parm){
	 super.setContent(parm);
	 if(NoteTextIndex.getInstance().isIndexOn())
		 NoteTextIndex.getInstance().updateNoteInIndex(this);
   }
   
   public void setName(String parm){
	   super.setName(parm);
	   if(NoteTextIndex.getInstance().isIndexOn())
			 NoteTextIndex.getInstance().updateNoteInIndex(this);
   }

   public void deleteMe(){
	  if(NoteTextIndex.getInstance().isIndexOn())
		   NoteTextIndex.getInstance().removeNoteFromIndex(this);
	  super.deleteMe();
   }

   public void reIntroduceMe(){
	  super.reIntroduceMe();
	  if(NoteTextIndex.getInstance().isIndexOn())
		   NoteTextIndex.getInstance().addNoteToIndex(this);
   }
   
   public boolean canDisplayMap(){
	   return true;
   }


}
