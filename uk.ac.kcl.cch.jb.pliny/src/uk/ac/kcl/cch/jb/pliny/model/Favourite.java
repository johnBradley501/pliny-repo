/*******************************************************************************
 * Copyright (c) 2007, 2012 John Bradley
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     John Bradley - initial API and implementation
 *     John Bradley - modified to support IDataServer approach to data management
 *******************************************************************************/

/**
 *
 * @author bradley (autogenerated)
 * @version 
 */
package uk.ac.kcl.cch.jb.pliny.model;

import java.io.*;
import java.util.*;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;

import uk.ac.kcl.cch.rdb2java.Rdb2javaPlugin;
import uk.ac.kcl.cch.rdb2java.dynData.*;
import uk.ac.kcl.cch.jb.pliny.PlinyPlugin;
import uk.ac.kcl.cch.jb.pliny.data.rdb.DBServices;


public class Favourite extends BaseObject
implements IAuthorityListItem, ILoadableFromResultSet, INamedObject, IHasResource{
   static protected FavouriteQuery myCache = new FavouriteQuery();

   protected int favouriteKey;
   private int favouriteResource;
   private Resource resource;

public static final String FAVOURITERESOURCE_PROP = "Favourite.favouriteResource";

   protected void setEmpty(){
     favouriteKey = 0;
     favouriteResource = 0;
     resource = null;

   }

   public static String getSelectEntities(){
       return
       "Favourite.favouriteKey,Favourite.favouriteResource";
   }
   
   public static String getTableJoins(){
       return "";
   }
   
   public static String getSQLFrom(){
       return "Favourite";
   }

   protected String getKeyName(){
       return "favouriteKey";
   }

   protected String getTableName(){
       return "Favourite";
   }

   //protected Connection getMyConnection(){return PlinyPlugin.getDefault().getConnection();}
   //protected void returnMyConnection(Connection con){PlinyPlugin.getDefault().returnConnection(con);}

   public int loadFromResultSet(ResultSet rs)throws SQLException{
      try {
      favouriteKey = rs.getInt(1);
      favouriteResource = rs.getInt(2);
      resource = null;
      } catch (Exception e){
		e.printStackTrace();
      }     
      return 2;
}

   // this constructor should only be used within the Query object.

   public Favourite(boolean realEmpty){
     super();
     setEmpty();
     if(!realEmpty){
        doInsert();
        if(myCache == null)myCache = new FavouriteQuery();
        myCache.addNewItem(this.favouriteKey, this);
        Rdb2javaPlugin.getDataServer().notifyCreate("Favourite", this);
        //PlinyPlugin.getDBServicesInstance().notifyCreate("Favourite", this);
     }
   }

   public Favourite(){
     super();
     setEmpty();
     doInsert();
     if(myCache == null)myCache = new FavouriteQuery();
     myCache.addNewItem(this.favouriteKey, this);
     Rdb2javaPlugin.getDataServer().notifyCreate("Favourite", this);
     //PlinyPlugin.getDBServicesInstance().notifyCreate("Favourite", this);
   }

   static public Favourite getItem(int key){
      if(myCache == null)myCache = new FavouriteQuery();
      return (Favourite)myCache.getObject(key);
   }

// code for standard getters

   public int getFavouriteKey(){return favouriteKey;}
   public Resource getResource(){
       if(favouriteResource <= 0)return null;
       if(resource == null)resource = Resource.getItem(favouriteResource);
       return resource;
   }

// code for standard setters

   public void setResource(Resource item){
     if((favouriteResource == 0) && (item == null))return;
     if((item != null) && (item.getALID()==favouriteResource))return;
     Resource oldItem = null;
     if(favouriteResource != 0){
        oldItem = getResource();
        getResource().getFavourites().remove(this);
        getResource().signalChangeFavourites(this,null);
     }
     favouriteResource = 0;
     if(item != null){
        favouriteResource = item.getALID(); 
        item.getFavourites().add(this);
        item.signalChangeFavourites(null,this);
     }
     resource=item;
     updateDBint("favouriteResource",favouriteResource);
     firePropertyChange(FAVOURITERESOURCE_PROP, oldItem, this);
   }
   
   protected void addEmptyFKRefLists(){
	   // nothing needed here.
   }


// code for saving back to the DB

   protected void loadParameters(Map map){
	   map.put("favouriteResource", favouriteResource);
   }

   public void deleteMe(){
      if(favouriteKey <= 0) return;
      myCache.getMyCache().deleteItem(favouriteKey);
      Rdb2javaPlugin.getDataServer().doDelete("Favourite", "favouriteKey", favouriteKey);
      Rdb2javaPlugin.getDataServer().notifyDelete("Favourite", this);
      favouriteKey = 0;
   }

   public void reIntroduceMe(){
      if(favouriteKey > 0)return;
      doInsert();
      myCache.getMyCache().addNewItem(favouriteKey, this);
      Rdb2javaPlugin.getDataServer().notifyCreate("Favourite", this);
   }

// code for results via foreign keys and intersection sets




// code for extra variables and methods

   
//EM{Favourite-findResource
   public static Favourite findFromResource(Resource resource){
	   if(resource == null || resource.getALID() == 0)return null;
	   FavouriteQuery q = new FavouriteQuery();
	   q.addConstraint("favouriteResource", BaseQuery.FilterEQUAL,resource.getALID());
	   Vector rslt = q.executeQuery();
	   if(rslt.size() < 1)return null;
	   return (Favourite)rslt.get(0);
   }
   
   public int getFavouriteResourceKey(){return favouriteResource;}
//EM}

//EM{Favourite-name
   public void setName(String name) {
   	  Resource myResource = getResource();
   	  myResource.setName(name);
   }

   public String getName() {
	  Resource myResource = getResource();
   	  return myResource.getName();
   }
//EM}

// code for toString

   private String displayKey(){
      return ""+getFavouriteKey();
   }

   public String toString(){
      return "Favourite: "+displayKey()+"("+getFavouriteKey()+")";
   }
   
   public String getALItem() {
       if(getFavouriteKey() <= 1) return "";
       return displayKey();
   }
   
   public int getALID() {
       return getFavouriteKey();
   }
   
   protected void setALID(int key){
	   favouriteKey = key;
   }
}
